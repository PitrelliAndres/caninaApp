"""Initial migration

Revision ID: 1d0b9618e540
Revises: 
Create Date: 2025-07-21 21:04:18.287239

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1d0b9618e540'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('neighborhood', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('address', sa.String(length=300), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('has_dog_area', sa.Boolean(), nullable=True),
    sa.Column('is_fenced', sa.Boolean(), nullable=True),
    sa.Column('has_water', sa.Boolean(), nullable=True),
    sa.Column('size_sqm', sa.Float(), nullable=True),
    sa.Column('photo_url', sa.String(length=500), nullable=True),
    sa.Column('photos', sa.JSON(), nullable=True),
    sa.Column('opening_hours', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('parks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_parks_neighborhood'), ['neighborhood'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('google_id', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('nickname', sa.String(length=100), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'FREE', 'PREMIUM', 'VIP', name='userrole'), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('allow_matching', sa.Boolean(), nullable=True),
    sa.Column('allow_proximity', sa.Boolean(), nullable=True),
    sa.Column('last_latitude', sa.Float(), nullable=True),
    sa.Column('last_longitude', sa.Float(), nullable=True),
    sa.Column('last_location_update', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_online', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_google_id'), ['google_id'], unique=True)

    op.create_table('dogs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('breed', sa.String(length=100), nullable=True),
    sa.Column('photo_url', sa.String(length=500), nullable=True),
    sa.Column('size', sa.String(length=50), nullable=True),
    sa.Column('temperament', sa.String(length=200), nullable=True),
    sa.Column('is_neutered', sa.Boolean(), nullable=True),
    sa.Column('is_vaccinated', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('matched_user_id', sa.Integer(), nullable=False),
    sa.Column('match_type', sa.String(length=20), nullable=True),
    sa.Column('is_mutual', sa.Boolean(), nullable=True),
    sa.Column('compatibility_score', sa.Integer(), nullable=True),
    sa.Column('context_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('mutual_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['matched_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'matched_user_id', name='_user_match_uc')
    )
    with op.batch_alter_table('matches', schema=None) as batch_op:
        batch_op.create_index('idx_user_matches', ['user_id', 'matched_user_id'], unique=False)

    op.create_table('messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('receiver_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('push_enabled', sa.Boolean(), nullable=True),
    sa.Column('email_enabled', sa.Boolean(), nullable=True),
    sa.Column('sms_enabled', sa.Boolean(), nullable=True),
    sa.Column('new_match_enabled', sa.Boolean(), nullable=True),
    sa.Column('new_message_enabled', sa.Boolean(), nullable=True),
    sa.Column('visit_reminder_enabled', sa.Boolean(), nullable=True),
    sa.Column('nearby_user_enabled', sa.Boolean(), nullable=True),
    sa.Column('quiet_hours_start', sa.Time(), nullable=True),
    sa.Column('quiet_hours_end', sa.Time(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('interests', sa.JSON(), nullable=True),
    sa.Column('preferred_age_min', sa.Integer(), nullable=True),
    sa.Column('preferred_age_max', sa.Integer(), nullable=True),
    sa.Column('fcm_token', sa.String(length=500), nullable=True),
    sa.Column('phone_number', sa.String(length=50), nullable=True),
    sa.Column('ban_reason', sa.Text(), nullable=True),
    sa.Column('banned_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('visits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('park_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('duration', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('checked_in_at', sa.DateTime(), nullable=True),
    sa.Column('checked_out_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('reminder_sent', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['park_id'], ['parks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'date', 'time', name='_user_datetime_uc')
    )
    with op.batch_alter_table('visits', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_visits_date'), ['date'], unique=False)

    op.create_table('conversations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user1_id', sa.Integer(), nullable=False),
    sa.Column('user2_id', sa.Integer(), nullable=False),
    sa.Column('last_message_id', sa.Integer(), nullable=True),
    sa.Column('last_message_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['last_message_id'], ['messages.id'], ),
    sa.ForeignKeyConstraint(['user1_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user2_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('conversations')
    with op.batch_alter_table('visits', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_visits_date'))

    op.drop_table('visits')
    op.drop_table('user_preferences')
    op.drop_table('notifications')
    op.drop_table('notification_preferences')
    op.drop_table('messages')
    with op.batch_alter_table('matches', schema=None) as batch_op:
        batch_op.drop_index('idx_user_matches')

    op.drop_table('matches')
    op.drop_table('dogs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_google_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('parks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_parks_neighborhood'))

    op.drop_table('parks')
    # ### end Alembic commands ###
